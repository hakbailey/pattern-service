# -------------------------------------
# Project
# -------------------------------------

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pattern_service"
version = "0.1.0"
description = "Ansible Pattern Service"
readme = "README.md"
license = "Apache-2.0"
license-files = ["LICENSE.md"]
requires-python = ">=3.11,<3.14"
dependencies = [
    "django-ansible-base==2025.5.8",
    "dispatcherd",
    "psycopg",
]

[project.urls]
Repository = "https://github.com/ansible/pattern-service"


# -------------------------------------
# Project: optional dependencies
# -------------------------------------

[project.optional-dependencies]
dev = [
    "pip-tools>=7.4,<8.0",
    "python-dotenv>=1.1.1,<2.0",
    "psycopg-binary==3.2.9",
]
test = [
    "black>=24.0,<25.0",
    "django-stubs>=5.2,<6.0",
    "flake8>=6.0,<7.0",
    "flynt>=1.0,<2.0",
    "isort>=5.12,<6.0",
    "mypy>=1.3,<2.0",
    "pytest-django>=4.11,<5.0",
    "tox>=4.27,<5.0",
]


# -------------------------------------
# Packaging
# -------------------------------------

[tool.setuptools]
packages = ["pattern_service"]


# -------------------------------------
# Tools
# -------------------------------------

[tool.black]
preview = true
target-version = ["py311", "py312", "py313"]

[tool.isort]
profile = "black"
force_single_line = true

[tool.mypy]
exclude = ["tests/"]
exclude_gitignore = true
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = ["ansible_base.*", "dotenv.*", "dispatcherd.*", "dynaconf.*"]
ignore_missing_imports = true


# -------------------------------------
# Tools: tox
# -------------------------------------

[tool.tox]
requires = ["tox>=4.26"]
env_list = ["check", "format", "lint", "test", "type"]

[tool.tox.env_run_base]
package = "wheel"

[tool.tox.env_run_base.set_env]
DJANGO_SETTINGS_MODULE = "pattern_service.settings"
PATTERN_SERVICE_MODE = "testing"
PIP_CONSTRAINT = "requirements/requirements-test.txt"

[tool.tox.env.py311]
description = "run tests using Python 3.11"
deps = ["pytest-django"]
commands = [
    [ "pytest", "-v" ]
]

[tool.tox.env.py312]
description = "run tests using Python 3.12"
deps = ["pytest-django"]
commands = [
    [ "pytest", "-v" ]
]

[tool.tox.env.py313]
description = "run tests using Python 3.13"
deps = ["pytest-django"]
commands = [
    [ "pytest", "-v" ]
]

[tool.tox.env.check]
description = "run pre-commit checks"
deps = ["pre-commit-uv"]
commands = [
    ["pre-commit", "run", "-a"]
]

[tool.tox.env.format]
description = "format the codebase with black, flynt, and isort"
deps = ["black", "flynt", "isort"]
commands = [
    ["black", "."],
    ["flynt", "."],
    ["isort", "."],
]

[tool.tox.env.lint]
description = "lint the codebase with black, flake8, flynt, and isort"
deps = ["black", "flake8", "flynt", "isort"]
commands = [
    ["black", "--check", "--diff", "--color", "."],
    ["flake8", "--max-line-length", "90", "."],
    ["flynt", "--dry-run", "--fail-on-change", "."],
    ["isort", "--check-only", "--diff", "."],
]

[tool.tox.env.test]
description = "run tests against all supported python versions"
deps = ["tox"]
commands = [
    [ "tox", "-e", "py311,py312,py313" ]
]

[tool.tox.env.type]
description = "type check the codebase with mypy"
deps = [
    "django-stubs[compatible-mypy]",
    "djangorestframework-stubs[compatible-mypy]",
    "mypy",
]
commands = [
    ["mypy", "."]
]
